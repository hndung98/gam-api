generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdsAccountStatus {
  ACTIVE
  SUSPENDED
  CLOSED
}

enum MCCStatus {
  PENDING
  ACTIVE
  CANCELLED
}

enum MCCType {
  PRIVATE
  PROTECTED
  PUBLIC
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum Role {
  ADMIN
  AGENCY
  CUSTOMER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  PURCHASE
  SPEND
}

model User {
  id       String  @id @default(uuid())
  googleId String  @unique
  email    String  @unique
  name     String?
  role     Role    @default(CUSTOMER)
  timezone String?
  currency String?

  mccs         MCC[]         @relation("MCCOwner")
  adsAccounts  AdsAccount[]  @relation("AdsAccountOwner")
  wallet       Wallet?
  transactions Transaction[]
  orders       Order[]
  profile      Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id       String  @id @default(uuid())
  fullname String?
  phone    String?
  country  String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model MCC {
  id               String    @id @default(uuid())
  name             String
  googleCustomerId String?   @unique
  type             MCCType   @default(PRIVATE)
  status           MCCStatus @default(PENDING)
  connected        Boolean   @default(false)

  ownerId     String
  owner       User         @relation("MCCOwner", fields: [ownerId], references: [id])
  adsAccounts AdsAccount[]

  createdAt DateTime @default(now())
}

model AdsAccount {
  id               String           @id @default(uuid())
  name             String
  status           AdsAccountStatus @default(ACTIVE)
  googleCustomerId String           @unique

  mccId String?
  mcc   MCC?    @relation(fields: [mccId], references: [id])

  ownerId String?
  owner   User?   @relation("AdsAccountOwner", fields: [ownerId], references: [id])

  isForSale Boolean @default(false)
  price     Float?

  orders Order[]

  createdAt DateTime @default(now())
}

model Wallet {
  id      String @id @default(uuid())
  balance Float  @default(0)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Transaction {
  id     String            @id @default(uuid())
  type   TransactionType
  status TransactionStatus @default(PENDING)
  amount Float
  note   String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Order {
  id     String      @id @default(uuid())
  price  Float
  status OrderStatus @default(PENDING)

  buyerId String
  buyer   User   @relation(fields: [buyerId], references: [id])

  adsAccountId String
  adsAccount   AdsAccount @relation(fields: [adsAccountId], references: [id])

  createdAt DateTime @default(now())
}
